// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pim_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PimServiceClient is the client API for PimService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PimServiceClient interface {
	Echo(ctx context.Context, in *String, opts ...grpc.CallOption) (*String, error)
	SearchBrands(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*Brands, error)
	AddBrands(ctx context.Context, in *Brands, opts ...grpc.CallOption) (*Empty, error)
}

type pimServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPimServiceClient(cc grpc.ClientConnInterface) PimServiceClient {
	return &pimServiceClient{cc}
}

func (c *pimServiceClient) Echo(ctx context.Context, in *String, opts ...grpc.CallOption) (*String, error) {
	out := new(String)
	err := c.cc.Invoke(ctx, "/pim.service.v1.PimService/Echo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pimServiceClient) SearchBrands(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*Brands, error) {
	out := new(Brands)
	err := c.cc.Invoke(ctx, "/pim.service.v1.PimService/SearchBrands", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pimServiceClient) AddBrands(ctx context.Context, in *Brands, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pim.service.v1.PimService/AddBrands", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PimServiceServer is the server API for PimService service.
// All implementations must embed UnimplementedPimServiceServer
// for forward compatibility
type PimServiceServer interface {
	Echo(context.Context, *String) (*String, error)
	SearchBrands(context.Context, *SearchRequest) (*Brands, error)
	AddBrands(context.Context, *Brands) (*Empty, error)
	mustEmbedUnimplementedPimServiceServer()
}

// UnimplementedPimServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPimServiceServer struct {
}

func (UnimplementedPimServiceServer) Echo(context.Context, *String) (*String, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Echo not implemented")
}
func (UnimplementedPimServiceServer) SearchBrands(context.Context, *SearchRequest) (*Brands, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchBrands not implemented")
}
func (UnimplementedPimServiceServer) AddBrands(context.Context, *Brands) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBrands not implemented")
}
func (UnimplementedPimServiceServer) mustEmbedUnimplementedPimServiceServer() {}

// UnsafePimServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PimServiceServer will
// result in compilation errors.
type UnsafePimServiceServer interface {
	mustEmbedUnimplementedPimServiceServer()
}

func RegisterPimServiceServer(s grpc.ServiceRegistrar, srv PimServiceServer) {
	s.RegisterService(&PimService_ServiceDesc, srv)
}

func _PimService_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PimServiceServer).Echo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pim.service.v1.PimService/Echo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PimServiceServer).Echo(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _PimService_SearchBrands_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PimServiceServer).SearchBrands(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pim.service.v1.PimService/SearchBrands",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PimServiceServer).SearchBrands(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PimService_AddBrands_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Brands)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PimServiceServer).AddBrands(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pim.service.v1.PimService/AddBrands",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PimServiceServer).AddBrands(ctx, req.(*Brands))
	}
	return interceptor(ctx, in, info, handler)
}

// PimService_ServiceDesc is the grpc.ServiceDesc for PimService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PimService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pim.service.v1.PimService",
	HandlerType: (*PimServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Echo",
			Handler:    _PimService_Echo_Handler,
		},
		{
			MethodName: "SearchBrands",
			Handler:    _PimService_SearchBrands_Handler,
		},
		{
			MethodName: "AddBrands",
			Handler:    _PimService_AddBrands_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/pim-service/pim-service.proto",
}
